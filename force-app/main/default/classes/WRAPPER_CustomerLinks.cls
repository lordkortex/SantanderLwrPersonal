//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class WRAPPER_CustomerLinks {

	public class PhoneDetails {
		public String internationalCode {get;set;} 
		public String areaCode {get;set;} 
		public String number_Z {get;set;} // in json: number
		public String extension {get;set;} 
		public ContactAvailability contactAvailability {get;set;} 

		public PhoneDetails(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'internationalCode') {
							internationalCode = parser.getText();
						} else if (text == 'areaCode') {
							areaCode = parser.getText();
						} else if (text == 'number') {
							number_Z = parser.getText();
						} else if (text == 'extension') {
							extension = parser.getText();
						} else if (text == 'contactAvailability') {
							contactAvailability = new ContactAvailability(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'PhoneDetails consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ContactInformationRepresentPerson {
		public String contactType {get;set;} 
		public PhoneDetails phoneDetails {get;set;} 
		public MobileDetails mobileDetails {get;set;} 
		public String emailDetails {get;set;} 
		public String snetDetails {get;set;} 

		public ContactInformationRepresentPerson(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contactType') {
							contactType = parser.getText();
						} else if (text == 'phoneDetails') {
							phoneDetails = new PhoneDetails(parser);
						} else if (text == 'mobileDetails') {
							mobileDetails = new MobileDetails(parser);
						} else if (text == 'emailDetails') {
							emailDetails = parser.getText();
						} else if (text == 'snetDetails') {
							snetDetails = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ContactInformationRepresentPerson consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class MobileDetails {
		public String internationalCode {get;set;} 
		public String number_Z {get;set;} // in json: number
		public ContactAvailability contactAvailability {get;set;} 

		public MobileDetails(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'internationalCode') {
							internationalCode = parser.getText();
						} else if (text == 'number') {
							number_Z = parser.getText();
						} else if (text == 'contactAvailability') {
							contactAvailability = new ContactAvailability(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'MobileDetails consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ContactsListRepresentPerson {
		public ContactInformationRepresentPerson contactInformationRepresentPerson {get;set;} 

		public ContactsListRepresentPerson(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contactInformationRepresentPerson') {
							contactInformationRepresentPerson = new ContactInformationRepresentPerson(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ContactsListRepresentPerson consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Relationship {
		public String relationshipType {get;set;} 
		public String typeDisposition {get;set;} 
		public String statusRelationship {get;set;} 
		public String department {get;set;} 
		public Double participationPercentage {get;set;} 

		public Relationship(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'relationshipType') {
							relationshipType = parser.getText();
						} else if (text == 'typeDisposition') {
							typeDisposition = parser.getText();
						} else if (text == 'statusRelationship') {
							statusRelationship = parser.getText();
						} else if (text == 'department') {
							department = parser.getText();
						} else if (text == 'participationPercentage') {
							participationPercentage = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Relationship consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CustomerRelationshipGet {
		public String fullName {get;set;} 
		public List<ListRelationship> listRelationship {get;set;} 
		public List<ContactsListRepresentPerson> contactsListRepresentPerson {get;set;} 

		public CustomerRelationshipGet(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fullName') {
							fullName = parser.getText();
						} else if (text == 'listRelationship') {
							listRelationship = arrayOfListRelationship(parser);
						} else if (text == 'contactsListRepresentPerson') {
							contactsListRepresentPerson = arrayOfContactsListRepresentPerson(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CustomerRelationshipGet consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ListRelationship {
		public Relationship relationship {get;set;} 

		public ListRelationship(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'relationship') {
							relationship = new Relationship(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ListRelationship consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ContactAvailability {
		public String fromTime {get;set;} 
		public String toTime {get;set;} 

		public ContactAvailability(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fromTime') {
							fromTime = parser.getText();
						} else if (text == 'toTime') {
							toTime = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ContactAvailability consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CustomerRelationshipResponse {
		public CustomerRelationshipGet customerRelationshipGet {get;set;} 

		public CustomerRelationshipResponse(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'customerRelationshipGet') {
							customerRelationshipGet = new CustomerRelationshipGet(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CustomerRelationshipResponse consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public CustomerRelationshipResponse customerRelationshipResponse {get;set;} 

	public WRAPPER_CustomerLinks(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'customerRelationshipResponse') {
						customerRelationshipResponse = new CustomerRelationshipResponse(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WRAPPER_CustomerLinks consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static WRAPPER_CustomerLinks parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WRAPPER_CustomerLinks(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	




    private static List<ListRelationship> arrayOfListRelationship(System.JSONParser p) {
        List<ListRelationship> res = new List<ListRelationship>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ListRelationship(p));
        }
        return res;
    }








    private static List<ContactsListRepresentPerson> arrayOfContactsListRepresentPerson(System.JSONParser p) {
        List<ContactsListRepresentPerson> res = new List<ContactsListRepresentPerson>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ContactsListRepresentPerson(p));
        }
        return res;
    }




}