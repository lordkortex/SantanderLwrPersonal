//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

global class WRAPPER_OperationsList {
    
    global WRAPPER_OperationsList(){
        System.debug('WRAPPER_OperationsList');
    }

	global class OperationDetail {
		global String operationGlobalId {get;set;} 
		global OperationStatus operationStatus {get;set;} 
		global String globalUserId {get;set;} 
		global String statusDate {get;set;} 
		global String issueDate {get;set;} 
		global String valueDate {get;set;} 
		global String clientReference {get;set;} 
		global String purpose {get;set;} 
		global String transferDescription {get;set;} 
		global OperationAmount operationAmount {get;set;} 
		global CounterValueOperationAmount counterValueOperationAmount {get;set;} 
		global OperationAmount sourceTotalAmount {get;set;} 
		global SourceData sourceData {get;set;} 
		global DestinationData destinationData {get;set;} 
		global String productId {get;set;} 
		global OperationNominalFxDetails operationNominalFxDetails {get;set;} 
		
        global OperationDetail(){
            System.debug('WRAPPER_OperationsLists.OperationDetail');
        }

		global OperationDetail(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'operationGlobalId') {
							operationGlobalId = parser.getText();
						} else if (text == 'operationStatus') {
							operationStatus = new OperationStatus(parser);
						} else if (text == 'globalUserId') {
							globalUserId = parser.getText();
						} else if (text == 'statusDate') {
							statusDate = parser.getText();
						} else if (text == 'issueDate') {
							issueDate = parser.getText();
						} else if (text == 'valueDate') {
							valueDate = parser.getText();
						} else if (text == 'clientReference') {
							clientReference = parser.getText();
						} else if (text == 'purpose') {
							purpose = parser.getText();
						} else if (text == 'transferDescription') {
							transferDescription = parser.getText();
						} else if (text == 'operationAmount') {
							operationAmount = new OperationAmount(parser);
						} else if (text == 'counterValueOperationAmount') {
							counterValueOperationAmount = new CounterValueOperationAmount(parser);
						} else if (text == 'sourceTotalAmount') {
							sourceTotalAmount = new OperationAmount(parser);
						} else if (text == 'sourceData') {
							sourceData = new SourceData(parser);
						} else if (text == 'destinationData') {
							destinationData = new DestinationData(parser);
						} else if (text == 'productId') {
							productId = parser.getText();
						} else if (text == 'operationNominalFxDetails') {
							operationNominalFxDetails = new OperationNominalFxDetails(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'OperationDetail consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	global OperationsListFile operationsListFile {get;set;} 
	global List<OperationsList> operationsList {get;set;} 

	global WRAPPER_OperationsList(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'operationsListFile') {
						operationsListFile = new OperationsListFile(parser);
					} else if (text == 'operationsList') {
						operationsList = arrayOfOperationsList(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WRAPPER_OperationsList consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	global class DestinationData {
		global String destinationName {get;set;} 
		global SourceAccount destinationAccount {get;set;} 
		global SourceAgent destinationAgent {get;set;} 
		global String countryDestinationFunds {get;set;} 
        
        global DestinationData(){
            System.debug('WRAPPER_OperationsLists.DestinationData');
        }

		global DestinationData(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'destinationName') {
							destinationName = parser.getText();
						} else if (text == 'destinationAccount') {
							destinationAccount = new SourceAccount(parser);
						} else if (text == 'destinationAgent') {
							destinationAgent = new SourceAgent(parser);
						} else if (text == 'countryDestinationFunds') {
							countryDestinationFunds = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'DestinationData consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	global class OperationAmount {
		global String tcurrency {get;set;} 
		global Decimal amount {get;set;}
        
        global OperationAmount(){
            System.debug('WRAPPER_OperationsLists.OperationAmount');
        }

		global OperationAmount(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'tcurrency') {
							tcurrency = parser.getText();
						} else if (text == 'amount') {
							amount = parser.getDecimalValue();
						} else {
							System.debug(LoggingLevel.WARN, 'OperationAmount consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	global class CounterValueOperationAmount {
		global String tcurrency {get;set;} 
		global Decimal amount {get;set;} 
		global String tradeCurrency {get;set;} 
        
        global CounterValueOperationAmount(){
            System.debug('WRAPPER_OperationsLists.CounterValueOperationAmount');
        }

		global CounterValueOperationAmount(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'tcurrency') {
							tcurrency = parser.getText();
						} else if (text == 'amount') {
							amount = parser.getDecimalValue();
						} else if (text == 'tradeCurrency') {
							tradeCurrency = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CounterValueOperationAmount consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	global class OperationStatus {
		global String status {get;set;} 
		global String reason {get;set;} 
        
        global OperationStatus(){
            System.debug('WRAPPER_OperationsLists.OperationStatus');
        }

		global OperationStatus(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'status') {
							status = parser.getText();
						} else if (text == 'reason') {
							reason = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'OperationStatus consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	global class SourceAccount {
		global String accountIdType {get;set;} 
		global String accountId {get;set;} 
		global String tcurrency {get;set;} 
        
        global SourceAccount(){
            System.debug('WRAPPER_OperationsLists.SourceAccount');
        }

		global SourceAccount(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'accountIdType') {
							accountIdType = parser.getText();
						} else if (text == 'accountId') {
							accountId = parser.getText();
						} else if (text == 'tcurrency') {
							tcurrency = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'SourceAccount consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	global class Links {
		global String x_first {get;set;} // in json: _first
		global String x_next {get;set;} // in json: _next
		global String x_prev {get;set;} // in json: _prev
        
        global Links(){
            System.debug('WRAPPER_OperationsLists.Links');
        }

		global Links(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '_first') {
							x_first = parser.getText();
						} else if (text == '_next') {
							x_next = parser.getText();
						} else if (text == '_prev') {
							x_prev = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Links consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	global class SourceAgent {
		global String agent {get;set;} 
		global String name {get;set;} 
		global String addressAgent {get;set;} 
        
        global SourceAgent(){
            System.debug('WRAPPER_OperationsLists.SourceAgent');
        }


		global SourceAgent(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'agent') {
							agent = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'addressAgent') {
							addressAgent = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'SourceAgent consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	global class OperationsListFile {
        
        global OperationsListFile(){
            System.debug('WRAPPER_OperationsLists.OperationsListFile');
        }

		global OperationsListFile(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'OperationsListFile consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	global class SourceData {
		global String name {get;set;} 
		global SourceAccount sourceAccount {get;set;} 
		global SourceAgent sourceAgent {get;set;} 
		global String sourceCountry {get;set;} 
        
        global SourceData(){
            System.debug('WRAPPER_OperationsLists.SourceData');
        }

		global SourceData(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'sourceAccount') {
							sourceAccount = new SourceAccount(parser);
						} else if (text == 'sourceAgent') {
							sourceAgent = new SourceAgent(parser);
						} else if (text == 'sourceCountry') {
							sourceCountry = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'SourceData consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	global class OperationsList {
		global OperationDetail operationDetail {get;set;} 
		global Links x_links {get;set;} // in json: _links
        
        global OperationsList(){
            System.debug('WRAPPER_OperationsLists.OperationsList');
        }

		global OperationsList(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'operationDetail') {
							operationDetail = new OperationDetail(parser);
						} else if (text == '_links') {
							x_links = new Links(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'OperationsList consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	global static WRAPPER_OperationsList parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WRAPPER_OperationsList(parser);
	}
	
	global static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	








    private static List<OperationsList> arrayOfOperationsList(System.JSONParser p) {
        List<OperationsList> res = new List<OperationsList>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new OperationsList(p));
        }
        return res;
	}
	
	global class OperationNominalFxDetails {
		global String fxCountervalueId {get;set;} 
		global String priceType {get;set;} 
		global Integer discount {get;set;} 
		global CcyCountervalue ccyCountervalue {get;set;} 
		global String valueDateEfx {get;set;} 
		global Double customerExchangeRate {get;set;} 
		global FxComercialMargin fxComercialMargin {get;set;} 
		global NominalAmountNoMarkUp nominalAmountNoMarkUp {get;set;} 

        global OperationNominalFxDetails(){
            System.debug('WRAPPER_OperationsLists.OperationNominalFxDetails');
        }

		global OperationNominalFxDetails(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fxCountervalueId') {
							fxCountervalueId = parser.getText();
						} else if (text == 'priceType') {
							priceType = parser.getText();
						} else if (text == 'discount') {
							discount = parser.getIntegerValue();
						} else if (text == 'ccyCountervalue') {
							ccyCountervalue = new CcyCountervalue(parser);
						} else if (text == 'valueDateEfx') {
							valueDateEfx = parser.getText();
						} else if (text == 'customerExchangeRate') {
							customerExchangeRate = parser.getDoubleValue();
						} else if (text == 'fxComercialMargin') {
							fxComercialMargin = new FxComercialMargin(parser);
						} else if (text == 'nominalAmountNoMarkUp') {
							nominalAmountNoMarkUp = new NominalAmountNoMarkUp(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'OperationNominalFxDetails consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	global class CcyCountervalue {
		global Double ccyCountervalueAmount {get;set;} 
		global String ccyCountervalueCurrency {get;set;} 

        global CcyCountervalue(){
            System.debug('WRAPPER_OperationsLists.CcyCountervalue');
        }

		global CcyCountervalue(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ccyCountervalueAmount') {
							ccyCountervalueAmount = parser.getDoubleValue();
						} else if (text == 'ccyCountervalueCurrency') {
							ccyCountervalueCurrency = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CcyCountervalue consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	global class FxComercialMargin {
		global Double fxComercialMarginAmount {get;set;} 
		global String fxComercialMarginCurrency {get;set;} 

        global FxComercialMargin(){
            System.debug('WRAPPER_OperationsLists.FxComercialMargin');
        }

		global FxComercialMargin(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fxComercialMarginAmount') {
							fxComercialMarginAmount = parser.getDoubleValue();
						} else if (text == 'fxComercialMarginCurrency') {
							fxComercialMarginCurrency = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'FxComercialMargin consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	global class NominalAmountNoMarkUp {
		global Double amount {get;set;} 
		global String tcurrency {get;set;} 

        global NominalAmountNoMarkUp(){
            System.debug('WRAPPER_OperationsLists.NominalAmountNoMarkUp');
        }

		global NominalAmountNoMarkUp(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'amount') {
							amount = parser.getDoubleValue();
						} else if (text == 'tcurrency') {
							tcurrency = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'NominalAmountNoMarkUp consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

}