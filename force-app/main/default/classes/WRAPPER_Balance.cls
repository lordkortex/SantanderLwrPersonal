//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

global class WRAPPER_Balance {

	@AuraEnabled global List<BalancesArbol> balancesArbol {get;set;} 
	@AuraEnabled global List<ListaDivisa> listaDivisa {get;set;} 
	@AuraEnabled global String descripcionConversion {get;set;} 
	@AuraEnabled global List<ListaTipCambio> listaTipCambio {get;set;} 

	global WRAPPER_Balance(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'balancesArbol') {
						balancesArbol = arrayOfBalancesArbol(parser);
					} else if (text == 'listaDivisa') {
						listaDivisa = arrayOfListaDivisa(parser);
					} else if (text == 'descripcionConversion') {
						descripcionConversion = parser.getText();
					} else if (text == 'listaTipCambio') {
						listaTipCambio = arrayOfListaTipCambio(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WRAPPER_Balance consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
    
    global WRAPPER_Balance() {
        System.debug('WRAPPER_Balance');
    }

	global class TipoDeCambio {
		@AuraEnabled global String claError {get;set;} 
		@AuraEnabled global String divisa {get;set;} 
		@AuraEnabled global String fecha {get;set;} 
		//@AuraEnabled global Integer importe {get;set;} 
		@AuraEnabled global Double importe {get;set;} 
		@AuraEnabled global Double importeDecimal {get;set;} 
		@AuraEnabled global String nombreDivisa {get;set;} 
		@AuraEnabled global String tipError {get;set;} 
		@AuraEnabled global Double totalBalanceEquivalente {get;set;}
		@AuraEnabled global Integer accountNumber {get;set;}

		global TipoDeCambio(){
            System.debug('WRAPPER_Balance.TipoDeCambio');
        }

		global TipoDeCambio(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'claError') {
							claError = parser.getText();
						} else if (text == 'divisa') {
							divisa = parser.getText();
						} else if (text == 'fecha') {
							fecha = parser.getText();
						} else if (text == 'importe') {
							//importe = parser.getIntegerValue();
							importe = parser.getDoubleValue();
						} else if (text == 'importeDecimal') {
							importeDecimal = parser.getDoubleValue();
						} else if (text == 'nombreDivisa') {
							nombreDivisa = parser.getText();
						} else if (text == 'tipError') {
							tipError = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'TipoDeCambio consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	global class MonedaArbol {
		@AuraEnabled global String divisaCuenta {get;set;} 
		@AuraEnabled global List<CuentaArbol> cuentaArbol {get;set;} 
		//@AuraEnabled global Integer sumBookBalance {get;set;} 
		@AuraEnabled global Double sumBookBalance {get;set;} 
		//@AuraEnabled global Integer sumValueBalance {get;set;} 
		@AuraEnabled global Double sumValueBalance {get;set;} 

		global MonedaArbol(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'divisaCuenta') {
							divisaCuenta = parser.getText();
						} else if (text == 'cuentaArbol') {
							cuentaArbol = arrayOfCuentaArbol(parser);
						} else if (text == 'sumBookBalance') {
							//sumBookBalance = parser.getIntegerValue();
							sumBookBalance = parser.getDoubleValue();
						} else if (text == 'sumValueBalance') {
							//sumValueBalance = parser.getIntegerValue();
                            sumValueBalance = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'MonedaArbol consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
        
        global MonedaArbol(){
            System.debug('WRAPPER_Balance.MonedaArbol');
        }
	}
	
	global class ListaMonedasArbol {
		@AuraEnabled global MonedaArbol monedaArbol {get;set;} 

		global ListaMonedasArbol(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'monedaArbol') {
							monedaArbol = new MonedaArbol(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ListaMonedasArbol consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
        
        global ListaMonedasArbol(){
            System.debug('WRAPPER_Balance.ListaMonedasArbol');
        }
	}
	
	global class CodigoBic {
		@AuraEnabled global String branch {get;set;} 
		@AuraEnabled global String entidadbic {get;set;} 
		@AuraEnabled global String locatorbic {get;set;} 
		@AuraEnabled global String paisbic {get;set;} 

		global CodigoBic(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'branch') {
							branch = parser.getText();
						} else if (text == 'entidadbic') {
							entidadbic = parser.getText();
						} else if (text == 'locatorbic') {
							locatorbic = parser.getText();
						} else if (text == 'paisbic') {
							paisbic = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CodigoBic consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
        
        global CodigoBic(){
            System.debug('WRAPPER_Balance.CodigoBic');
        }
	}
	
	global class ListaDivisa {

		global ListaDivisa(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'ListaDivisa consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
        
        global ListaDivisa(){
            System.debug('WRAPPER_Balance.ListaDivisa');
        }
	}
    
       global class AccountHolderAddress {
        @AuraEnabled
		global String streetName {get;set;}
        @AuraEnabled
		global String townName {get;set;}
		@AuraEnabled
		global String country {get;set;}
		global AccountHolderAddress () {}  
        
         global AccountHolderAddress(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'streetName') {
                            streetName = parser.getText();
                        } else if (text == 'townName') {
                            townName = parser.getText();
                        } else if (text == 'country') {
                            country = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'AccountHolderAddress consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
	}
       

	global class CuentaArbol {
		@AuraEnabled global String aliasCuentaPerfilado {get;set;} 
		@AuraEnabled global String aliasEntidad {get;set;} 
		//@AuraEnabled global Integer bookBalance {get;set;} 
		@AuraEnabled global Double bookBalance {get;set;} 
		@AuraEnabled global String bookDate {get;set;} 
		@AuraEnabled global String customerId {get;set;} 
		@AuraEnabled global CodigoBic codigoBic {get;set;} 
		@AuraEnabled global AccountHolderAddress accountHolderAddress {get;set;} 
		@AuraEnabled global Integer codigoCorporate {get;set;} 
		@AuraEnabled global Integer codigoCuenta {get;set;} 
		@AuraEnabled global String cuentaExtracto {get;set;} 
		@AuraEnabled global String divisa {get;set;} 
		@AuraEnabled global String nombreCorporate {get;set;} 
		@AuraEnabled global String nombreEmisora {get;set;} 
		//@AuraEnabled global Integer valueBalance {get;set;} 
		@AuraEnabled public String status {get;set;}
        @AuraEnabled global Double valueBalance {get;set;} 
		@AuraEnabled global String valueDate {get;set;} 
		
		@AuraEnabled global Double bookBalanceDouble {get;set;}
		@AuraEnabled global Double availableBalanceDouble {get;set;}

		@AuraEnabled global Boolean balanceAllowed {get;set;}
		@AuraEnabled global Boolean internationalPaymentsAllowed {get;set;}
		@AuraEnabled global Boolean transactionsAllowed {get;set;}
        
        //SNJ - 23/04/2020 -- Adding codigoEmisora
		@AuraEnabled global Integer codEmisora {get;set;}
		
		//AM - 28/09/2020 - Ebury Accounts
		@AuraEnabled global String dataProvider {get;set;}
		@AuraEnabled global List<WRAPPER_Balance_LU.AssociatedAccountList> associatedAccountList {get;set;}
		
		@AuraEnabled global Map<String, Double> bookBalanceMapped;
		@AuraEnabled global Map<String, Double> avaibleBookBalanceMapped;

		global CuentaArbol(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'aliasCuentaPerfilado') {
							aliasCuentaPerfilado = parser.getText();
						} else if (text == 'aliasEntidad') {
							aliasEntidad = parser.getText();
						} else if (text == 'bookBalance') {
							//bookBalance = parser.getIntegerValue();
							bookBalance = parser.getDoubleValue(); 
						} else if (text == 'bookDate') {
							bookDate = parser.getText();
						} else if (text == 'codigoBic') {
							codigoBic = new CodigoBic(parser);
						} else if (text == 'codigoCorporate') {
							codigoCorporate = parser.getIntegerValue();
						} else if (text == 'codigoCuenta') {
							codigoCuenta = parser.getIntegerValue();
						} else if (text == 'cuentaExtracto') {
							cuentaExtracto = parser.getText();
						} else if (text == 'divisa') {
							divisa = parser.getText();
						} else if (text == 'nombreCorporate') {
							nombreCorporate = parser.getText();
						} else if (text == 'nombreEmisora') {
							nombreEmisora = parser.getText();
						} else if (text == 'valueBalance') {
						 //valueBalance = parser.getIntegerValue();
							valueBalance  =  parser.getDoubleValue();                           
						} else if (text == 'valueDate') {
							valueDate = parser.getText();
                        } else if (text == 'codEmisora') {
							codEmisora = parser.getIntegerValue();
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'balanceAllowed') {
							balanceAllowed = parser.getBooleanValue();
						} else if (text == 'internationalPaymentsAllowed') {
							internationalPaymentsAllowed = parser.getBooleanValue();
                        }else if (text == 'accountHolderAddress') {
							accountHolderAddress = new AccountHolderAddress(parser);
						} else if (text == 'transactionsAllowed') {
							transactionsAllowed = parser.getBooleanValue();
							
						//AM - 28/09/2020 - Ebury Accounts
						} else if (text == 'dataProvider') {
							dataProvider = parser.getText();
						}
                         else {
							System.debug(LoggingLevel.WARN, 'CuentaArbol consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
        
		global CuentaArbol(){
            System.debug('WRAPPER_Balance.CuentaArbol');
        }
	}
	
	global class BalancesArbol {
		@AuraEnabled global PaisArbol paisArbol {get;set;} 

		global BalancesArbol(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'paisArbol') {
							paisArbol = new PaisArbol(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'BalancesArbol consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
        
        global BalancesArbol(){
            System.debug('WRAPPER_Balance.BalancesArbol');
        }
	}
	
	global class ListaTipCambio {
		@AuraEnabled global TipoDeCambio tipoDeCambio {get;set;} 

		global ListaTipCambio(){
            System.debug('WRAPPER_Balance.ListaTipCambio');
        }
        
		global ListaTipCambio(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'tipoDeCambio') {
							tipoDeCambio = new TipoDeCambio(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ListaTipCambio consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	global class PaisArbol {
		@AuraEnabled global String codPais {get;set;} 
		@AuraEnabled global String divisaUsuario {get;set;} 
		@AuraEnabled global List<ListaMonedasArbol> listaMonedasArbol {get;set;} 
		@AuraEnabled global Double sumBookBalanceDivUsu {get;set;} 
		@AuraEnabled global Double sumValueBalanceDivUsu {get;set;} 

		global PaisArbol(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'codPais') {
							codPais = parser.getText();
						} else if (text == 'divisaUsuario') {
							divisaUsuario = parser.getText();
						} else if (text == 'listaMonedasArbol') {
							listaMonedasArbol = arrayOfListaMonedasArbol(parser);
						} else if (text == 'sumBookBalanceDivUsu') {
							sumBookBalanceDivUsu = parser.getDoubleValue();
						} else if (text == 'sumValueBalanceDivUsu') {
							sumValueBalanceDivUsu = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'PaisArbol consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
        
        global PaisArbol(){
            System.debug('WRAPPER_Balance.PaisArbol');
        }
	}
	
	global static WRAPPER_Balance parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WRAPPER_Balance(parser);
	}
	
	global static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	
    private static List<ListaDivisa> arrayOfListaDivisa(System.JSONParser p) {
        List<ListaDivisa> res = new List<ListaDivisa>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ListaDivisa(p));
        }
        return res;
    }

    private static List<CuentaArbol> arrayOfCuentaArbol(System.JSONParser p) {
        List<CuentaArbol> res = new List<CuentaArbol>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new CuentaArbol(p));
        }
        return res;
    }

    private static List<ListaTipCambio> arrayOfListaTipCambio(System.JSONParser p) {
        List<ListaTipCambio> res = new List<ListaTipCambio>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ListaTipCambio(p));
        }
        return res;
    }

    private static List<BalancesArbol> arrayOfBalancesArbol(System.JSONParser p) {
        List<BalancesArbol> res = new List<BalancesArbol>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new BalancesArbol(p));
        }
        return res;
    }

    private static List<ListaMonedasArbol> arrayOfListaMonedasArbol(System.JSONParser p) {
        List<ListaMonedasArbol> res = new List<ListaMonedasArbol>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ListaMonedasArbol(p));
        }
        return res;
	}
	

	global class CountryGrouped {
		@AuraEnabled global Integer accountCount;
		@AuraEnabled global String countryCode;
		@AuraEnabled global String countryFullName;
		@AuraEnabled global List<CuentaArbol> listaCuentas;
		
		@AuraEnabled global Map<String,Decimal> avaibleBalanceMapped;
		@AuraEnabled global Map<String,Decimal> bookBalanceMapped;
		@AuraEnabled global Double availableBalance;
		@AuraEnabled global Double totalBalance;

		global CountryGrouped() {
			listaCuentas = new List<CuentaArbol>();
		}
	
	}

	global class CorporateGrouped {
		@AuraEnabled global String corporateName;
		@AuraEnabled global Integer accountCount;
		@AuraEnabled global Double availableBalance;
		@AuraEnabled global Double totalBalance;
		@AuraEnabled global Map<String,Decimal> avaibleBalanceMapped;
		@AuraEnabled global Map<String,Decimal> bookBalanceMapped;
		@AuraEnabled global List<CuentaArbol> listaCuentas = new List<CuentaArbol>();
        
        global CorporateGrouped(){
            System.debug('WRAPPER_Balance.CorporateGrouped');
        }
	}

	global class TiposDeCambio {
		@AuraEnabled global String divisa;
		@AuraEnabled global Decimal value;
		
		global TiposDeCambio(){
            System.debug('WRAPPER_Balance.TiposDeCambio');
        }
		global TiposDeCambio(String divisa, Decimal value) {
			this.divisa = divisa;
			this.value = value;
		}
	}
    
    //SNJ - 24/04/2020 -- CurrencyGrouped
    global class CurrencyGrouped{
        @AuraEnabled global String divisa;
        @AuraEnabled global Double availableBalance;
        @AuraEnabled global Double totalBalance;
        @AuraEnabled global List<CuentaArbol> listaCuentas = new List<CuentaArbol>(); 
        
        global CurrencyGrouped(){
            System.debug('WRAPPER_Balance.CurrencyGrouped');
        }
    }

	
}