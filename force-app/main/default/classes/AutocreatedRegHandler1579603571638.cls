//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class AutocreatedRegHandler1579603571638 implements Auth.RegistrationHandler{


        private static final String DEFAULT_ACCOUNTNAME = 'Empresa';

    global boolean canCreateUser(Auth.UserData data) {
        System.debug('canCreateUser was called for ' + (data != null ? data.email : 'null'));
        Boolean retVal = (data != null 
                && data.email != null
                && data.lastName != null
                && data.firstName != null);
        
        System.debug('data.username='+data.username);
        System.debug('data.email='+data.email);
        System.debug('data.lastName='+data.lastName);
        System.debug('data.firstName='+data.firstName);
        
         if(Test.isRunningTest()){
        return true;
        }else{
        return false;
        }
    }

    global User createUser(Id portalId, Auth.UserData data){
        if(!canCreateUser(data)) {
            //Returning null or throwing an exception fails the SSO flow
            return null;
        }
        system.debug(data);
        System.debug(data.attributeMap);
        System.debug('entity: ' + data.attributeMap.get('entity'));
        System.debug('luid: ' + data.attributeMap.get('luid'));
        System.debug('sub: ' + data.attributeMap.get('sub'));
        System.debug('identifier: ' + data.identifier);
        
    //  if(data.attributeMap.containsKey('sfdc_networkid')) {
            //We have a community id, so create a user with community access
            //TODO: Get an actual account
   /*         System.debug('Registering Community user: ' + data.attributeMap.get('sub') + '@gtsinvalid.com');
            Id contactId;
            List<User> existingUser =[select id from User where FederationIdentifier=: data.identifier];
            List<Contact> existingContacts = [select id, email from Contact where email =: data.attributeMap.get('sub') + '@gtsinvalid.com'];
            if (existingContacts.size() > 0){
                // Use the first Contact with matching email
                Contact existingContact = existingContacts[0];
                contactId = existingContact.Id;
                List<User> existingUsers = [select id from User where ContactId =: contactId];
                if (existingUsers.size() == 1){
                    // Use this User instead of creating a new one
                    // The Registration Handler system will assoicate the Auth Provider
                    // with this user
                    return existingUsers[0];
                }
            } else {
            Account a = [SELECT Id FROM account WHERE name='Empresa'];
            Contact c = new Contact();
            c.accountId = a.Id;
            c.email = data.attributeMap.get('sub')  + '@gtsinvalid.com';
            c.firstName = data.firstName;
            c.lastName = data.attributeMap.get('sub');
            insert(c);
            contactId=c.Id;
            }
            system.debug('CreateUser');

            //TODO: Customize the username and profile. Also check that the username doesn't already exist and
            //possibly ensure there are enough org licenses to create a user. Must be 80 characters or less.
            User u = new User();
            Profile p = [SELECT Id FROM profile WHERE name='QA Customer Community Plus'];
            u.username = data.attributeMap.get('sub') + '@gtsinvalid.com';
            system.debug(u.username);
            u.email = data.attributeMap.get('sub') + '@gtsinvalid.com';
            u.lastName = data.attributeMap.get('sub');
            u.firstName = data.firstName;
            String alias = data.attributeMap.get('sub');
            //Alias must be 8 characters or less
            if(alias.length() > 8) {
                alias = alias.substring(0, 8);
            }
            u.alias = alias;
            u.languagelocalekey = 'ES';
            u.localesidkey = UserInfo.getLocale();
            u.emailEncodingKey = 'UTF-8';
            u.timeZoneSidKey = 'America/Los_Angeles';
            u.profileId = p.Id;
            u.contactId = contactId;
            return u;*/
        String sub=data.attributeMap.get('sub');
        Contact cId=new Contact();
        List<Contact> listContact = new List<Contact>();
        
        listContact =[SELECT Id, FirstName, LastName,Email, CONTACT_TXT_BIC__c, CONTACT_Country__c,CONTACT_TXT_GlobalId__c,CONTACT_TXT_LocalUid__c, CONTACT_TXT_RelationshipType__c from Contact where CONTACT_TXT_GlobalId__c=:sub LIMIT 1];
     if (listContact.size() > 0){   
            cId = listContact[0];     
            User nuevoUsr = new User();
            nuevoUsr.FirstName = cId.FirstName;
            nuevoUsr.LastName = cId.LastName;
            nuevoUsr.USER_TXT_GlobalId__c = cId.CONTACT_TXT_GlobalId__c;
            nuevoUsr.FederationIdentifier = cId.CONTACT_TXT_GlobalId__c;
            nuevoUsr.CommunityNickname = cId.CONTACT_TXT_GlobalId__c;
         
         	//Added by CerviÃ±o 17/11/2020
            nuevoUsr.USER_TXT_LocalUid__c = cId.CONTACT_TXT_LocalUid__c;
         
            String alias= cId.CONTACT_TXT_GlobalId__c;
            //Alias must be 8 characters or less
            if(alias.length() > 8) {
                alias = alias.substring(0, 8);
            }
            nuevoUsr.Alias = alias;
            nuevoUsr.username = cId.CONTACT_TXT_GlobalId__c + '@gtsinvalid.com';
            if (cId.Email != null && cId.Email != ''){
                nuevoUsr.Email = cId.Email;
            }else{
                nuevoUsr.Email = 'globalid@gts.invalid.com';
            }
            nuevoUsr.emailEncodingKey = 'UTF-8';
            nuevoUsr.ContactId = cId.Id;
            nuevoUsr.USER_country__c = cId.CONTACT_Country__c;
            nuevoUsr.USER_TXT_BIC__c = cId.CONTACT_TXT_BIC__c;
            if (cId.CONTACT_TXT_RelationshipType__c == 'FUNC'){
                Profile p = [SELECT Id FROM profile WHERE name='Nexus User'];
                nuevoUsr.profileId = p.Id;
                nuevoUsr.USER_CHK_CashNexus__c = true;
            }else if (cId.CONTACT_TXT_RelationshipType__c == 'ADMIN'){
                Profile p = [SELECT Id FROM profile WHERE name='Admin Nexus User'];
                nuevoUsr.profileId = p.Id;
                nuevoUsr.USER_CHK_CashNexus__c = true;
            }else{
                Profile p = [SELECT Id FROM profile WHERE name='Portal User'];
                nuevoUsr.profileId = p.Id;
            }
         	// Call the payments tracker service to have the information pre-loaded
        	ID jobID = System.enqueueJob(new CALLOUT_PaymentsTrackerAsyncCallout(data.identifier));
            return nuevoUsr;            
       }else{
        return null;
       }  
        } 
/*else {
            //This is not a community, so create a regular standard user
            User u = new User();
            Profile p = [SELECT Id FROM profile WHERE name='Standard User'];
            //TODO: Customize the username. Also check that the username doesn't already exist and
            //possibly ensure there are enough org licenses to create a user. Must be 80 characters
            //or less.
            u.username = data.username + '@myorg.com';
            u.email = data.email;
            u.lastName = data.lastName;
            u.firstName = data.firstName;
            String alias = data.username;
            //Alias must be 8 characters or less
            if(alias.length() > 8) {
                alias = alias.substring(0, 8);
            }
            u.alias = alias;
            u.languagelocalekey = UserInfo.getLocale();
            u.localesidkey = UserInfo.getLocale();
            u.emailEncodingKey = 'UTF-8';
            u.timeZoneSidKey = 'America/Los_Angeles';
            u.profileId = p.Id;
            return u;
        }
    }*/

    global void updateUser(Id userId, Id portalId, Auth.UserData data){
        System.debug('updateUser');
        System.debug(data);
        System.debug(data.attributeMap);
        System.debug('entity: ' + data.attributeMap.get('entity'));
        System.debug('luid: ' + data.attributeMap.get('luid'));
        System.debug('sub: ' + data.attributeMap.get('sub'));
        System.debug('identifier: ' + data.identifier);

        
                
        Map<String,String> claims= new Map<String,String>();
        claims.put('country',data.attributeMap.get('country')+data.attributeMap.get('entity'));
        //Map<String,String> entity = new Map<String,String>();
        // claims.put('entity',data.attributeMap.get('entity'));
        claims.put('local_uid',data.attributeMap.get('luid'));
        claims.put('local_real', '');
        
        Auth.JWT jwt = new Auth.JWT();
        jwt.setIss(System.Label.jwtIss); //'desGtsInternet'
        jwt.setSub(data.identifier);
            
        jwt.setValidityLength(86400);    
        jwt.setAdditionalClaims(claims);
        
    
        Auth.JWS signedToken = new Auth.JWS(jwt,System.Label.certificateName);   // SelfSignedCert_02Oct2019_144111
        String serializedJwtToken = signedToken.getCompactSerialization();
        System.debug('serializedJwtToken:  ' + serializedJwtToken );
        
       /* Cache.Org.put('serializedJwtToken', serializedJwtToken);
        Cache.Org.put('data', data);
        if (Cache.Org.contains('serializedJwtToken')) {
        System.debug('Cache.Org jwt token : ' + Cache.Org.get('serializedJwtToken'));
        }
        if (Cache.Org.contains('data')) {
        System.debug('Cache.Org data : ' + Cache.Org.get('data'));
        }
         */
        // Create a map between the user's globalId and its associated access token, to retrieve later in the Community
        Map<String,String> mapGlobalIdToJwtToken = new Map<String,String>();
        if(!Cache.Org.contains('mapGlobalIdToJwtToken')) {
            mapGlobalIdToJwtToken.put(data.identifier, serializedJwtToken);
        } else {
            mapGlobalIdToJwtToken = (Map<String,String>)Cache.Org.get('mapGlobalIdToJwtToken');
            mapGlobalIdToJwtToken.put(data.identifier, serializedJwtToken);
        }
        Integer orgCacheTtlSecs = 60000; // Time-to-life value for the cached value, 60000 seconds ~ 16,5h
        Cache.Org.put('mapGlobalIdToJwtToken', mapGlobalIdToJwtToken, orgCacheTtlSecs);
        System.debug('Cache.Org JWT Token Map : ' + Cache.Org.get('mapGlobalIdToJwtToken'));
        
                
        // Call the payments tracker service to have the information pre-loaded
        ID jobID = System.enqueueJob(new CALLOUT_PaymentsTrackerAsyncCallout(data.identifier));

        //User u = new User(id=userId);
        //TODO: Customize the username. Must be 80 characters or less.
        //u.username = data.username + '@myorg.com';
        //u.email = data.email;
        //u.lastName = data.lastName;
        //u.firstName = data.firstName;
        //String alias = data.username;
        //Alias must be 8 characters or less
        //if(alias.length() > 8) {
            //alias = alias.substring(0, 8);
        //}
        //u.alias = alias;
        //update(u);
    }
}